
rm(list=ls())

setwd("C:\\Users\\afodor\\git\\giardia_murine_fmt\\data")

levels<- c("kingdom",  "phylum" , "class" , "order" , "family", "genus", "species" )

for( taxa in levels) 
{
	inFile <- paste0( "pcoa_", taxa, "Log10NormMetadataallData.txt")
	myT <- read.table(inFile, sep="\t", header=TRUE, row.names=1)

	# 19 only 
	myT <- myT[ myT$experiment=="GMN19",]

	challenge <- droplevels( myT$challenge);
	diet <- droplevels(myT$diet);
	time <-  myT$dayOnDiet
	
	challengePrefix<- vector()
	
	for( i in 1:length(challenge))
	{
		old <- toString( challenge[i])
		if( old == "FMT_CD_GIARDIA" | old == "FMT_CD_PBS"  )
		{
			old = "FMT_CD"
		}
		
		if( old == "FMT_PD_GIARDIA" | old == "FMT_PD_PBS" )
		{
			old = "FMT_PD"
		}
		
		challengePrefix[i] = old
	}

	
	challengeColors<- vector()
	
	for( i in 1:length(challengePrefix))
	{
		if( challengePrefix[i] == "FMT_CD" )
		{
			challengeColors[i] = "blue"
		}
		
		if( challengePrefix[i] == "FMT_PD" )
		{
			challengeColors[i] = "red"
		}
	}
	
	challengePrefix = factor(challengePrefix)
	
	
	# no cage information
	#cage <- droplevels(myT$cage)
	
	pValuesChallengePrefix <- vector()
	pValuesTime<- vector()
	pValuesInteraction <- vector()
	originalColumn <- vector()
	names <- vector()
	index <- 1
	
	startPos <- which(names(myT)=="shannonDiveristy")
	endPos <- which(names(myT)=="MDS5")
	
	for( i in (startPos:endPos) ) 
	{
		yData <- myT[,i]
		
		if( sum( yData != 0) > nrow(myT) /10 ) 
		{
			aLm <- lm( yData ~ challenge * time)
			names[index] <- names(myT)[i]
			pValuesChallengePrefix[index] <- anova(aLm)$"Pr(>F)"[1]
			pValuesTime[index] <- anova(aLm)$"Pr(>F)"[2]
			pValuesInteraction[index] <- anova(aLm)$"Pr(>F)"[3]
			originalColumn[index] <- i
			index <- index + 1
		}
	}
	
	dFrame <- data.frame( names,pValuesChallengePrefix,pValuesTime, pValuesInteraction,originalColumn)
	dFrame <- dFrame [order(dFrame$pValuesChallengePrefix),]
	
	dFrame$adjustedPChallengePrefix <- p.adjust( dFrame$pValuesChallengePrefix, method = "BH" )	
	dFrame$adjustedPInteraction <- p.adjust( dFrame$pValuesInteraction, method = "BH" )
	dFrame$adjustedPTime <- p.adjust( dFrame$pValuesTime, method = "BH" )		
	
	write.table(dFrame, file=paste("pValuesForTimeInput_GM19_", taxa, ".txt",sep=""), sep="\t",row.names=FALSE)
	
	pdf(paste0(taxa,"m19_timeInput.pdf"))
	par(mfrow=c(2,2))
	for( i in 1:nrow(dFrame)) 
	{
		data <- myT[ , dFrame$originalColumn[i] ]
		graphMain =  paste( dFrame$names[i], "\nadj. p time=", format(dFrame$adjustedPTime[i] , digits=3))
		plot( data  ~ time, ylab = names[index],main = graphMain ,col= challengeColors )	
		
		myFrame <- data.frame(data,challengePrefix,time)
		
		graphMain =  paste( " adj. p input=", format(dFrame$adjustedPChallengePrefix[i] , digits=3), "\n",
						 " adj. p interaction=", format(dFrame$adjustedPInteraction[i] , digits=3))
						
		plot( data  ~ challengePrefix, ylab = names[index],main = graphMain )	
		
		stripchart(data[myT$challengePrefix=="FMT_CD"]  ~ challenge[myT$challengePrefix=="FMT_CD"] 
				,data = myFrame,vertical = TRUE, pch = 19, add=TRUE ,col="BLUE",cex=1.3,method="jitter")		
					
		stripchart(data[myT$challengePrefix=="FMT_PD"]  ~ challenge[myT$challengePrefix=="FMT_PD"] 
				,data = myFrame,vertical = TRUE, pch = 19, add=TRUE ,col="RED",cex=1.3,method="jitter")		
	}
	
	dev.off()
}

