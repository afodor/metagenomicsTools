rm(list=ls())

setwd("C:\\DaisyQunitles")

getQuintileGroup <- function( val, quintile )
{
	for( i in 1:4)
	{
		if( val >= as.numeric(quintile[i]) & val <= as.numeric(quintile[i+1]) ) 
			return (i) 
	}

	return (5)
	
}

# very slow.... 
getMatchingRowIndex <- function( myFrame, taxaName, q)
{
	for( i in 1:nrow(myFrame))
	{
		if( myFrame$taxaNames[i] == taxaName & myFrame$qintForPValue[i] == q   )
		{
			return (i)
		}
	}
	
	return (-1)
}


myT <- read.table("genuspivotedLogNormPlusMetaMDS.txt", sep="\t", header=TRUE)

myT <- myT[  !is.na(myT$percentChangeBLTwelveWeight),]

quintile <- quantile(myT$percentChangeBLTwelveWeight, probs=c(0,.2,.4,.6,.8,1))

qunitAssignments <- vector()

for( i in 1:nrow(myT)) 
{
	qunitAssignments[i] = getQuintileGroup(  myT$percentChangeBLTwelveWeight[i], quintile ) 
}

pValues <-vector()
qintForPValue <- vector()
taxaNames <- vector()
index <- 1

for( i in 20:ncol(myT))
{
	if( sum(myT[,i] != 0 ) > nrow(myT) / 10 )
	{
		for( j in 1:5 )
		{
			myLm <- lm(  myT[ qunitAssignments == j  ,i] ~ myT$timepoint[qunitAssignments == j  ])
			pValues[index] = anova(myLm)$"Pr(>F)"[1]
			qintForPValue[index] = j
			taxaNames[index] = names(myT)[i]
			index = index + 1	
		}
	}
}
	
pdf("histograms.pdf")
par(mfrow=c(3,2))

for( j in 1:5 ) 
{
	hist(pValues[qintForPValue==j], main=paste("Quintile=",j) )		
}

boxplot(  myT$percentChangeBLTwelveWeight[qunitAssignments == 1], 
			myT$percentChangeBLTwelveWeight[qunitAssignments == 2],
				myT$percentChangeBLTwelveWeight[qunitAssignments == 3],
					myT$percentChangeBLTwelveWeight[qunitAssignments == 4],
						myT$percentChangeBLTwelveWeight[qunitAssignments == 5],xlab="quintile", ylab="Percent Change BL TwelveWeight")

dFrame<-data.frame(pValues,qintForPValue,taxaNames)
dFrame <- dFrame[ order( pValues ),]
write.table(dFrame, file="allPValuesToTimeByQuintile.txt", sep="\t", row.names=FALSE)					

for( i in 1:nrow(dFrame))
{
	if(dFrame$qintForPValue[i] == 1)
	{
		dataCol <- which( names(myT) == dFrame$taxaNames[i] )
		
		for( j in 1:5) 
		{
			rowNum = getMatchingRowIndex( dFrame, dFrame$taxaNames[i] ,  j)
			myText <- 
			paste( dFrame$taxaNames[rowNum], "\nquintile", dFrame$qintForPValue[rowNum], "p=", 
						format(dFrame$pValues[rowNum],digits=3) )
						
			plot(myT$timepoint[qunitAssignments == j  ],myT[ qunitAssignments == j  ,dataCol] , main=myText)
		}
		
		plot.new()
	}
}

dev.off()

boxplot(  -log10( pValues[qintForPValue==1]), 
			-log10(pValues[qintForPValue==2]),
				-log10(pValues[qintForPValue==3]),
					-log10(pValues[qintForPValue==4]),
						-log10(pValues[qintForPValue==5]),xlab="quintile", ylab="-log10(pValues)")

		
	