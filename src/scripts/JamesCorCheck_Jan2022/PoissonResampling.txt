rm(list=ls())

tables <- list()
names <- vector()

setwd("c:\\JamesKraken")
myT <- read.table("genusTaxaAsColumnsRDPWithMetadata.txt", sep="\t", header=TRUE, row.names=1)
myT <- myT[ myT$readNumber ==1 & myT$timepoint == "first_A" ,5:ncol(myT)]
tables[[1]] <- myT
names[1] <- "Winglee 16S"


setwd("c:\\JamesKraken")
myT <- read.table("chinaKrakenLogNorm.txt", sep="\t", header=TRUE, row.names=1)
tables[[2]] <- myT
names[2] <- "Winglee China mini kraken"


setwd("C:\\Users\\afodor\\git\\Ranking_WGS_Classifier\\Normalized_Tables\\China")
myT <- read.table("Kraken2_China_genus_Normalized.csv", sep=",", header=TRUE,row.names=1)
myT <- myT[ , c(2:ncol(myT)) ]
tables[[3]] <- myT
names[3] <- "James China full kraken"

setwd("C:\\Users\\afodor\\git\\Ranking_WGS_Classifier\\Normalized_Tables\\IBD")
myT <- read.table("Kraken2_IBD_genus_Normalized.csv", sep=",", header=TRUE,row.names=1)
myT <- myT[ , c(3:ncol(myT)) ]
tables[[4]] <- myT
names[4] <- "James IBD full kraken"

par(mfrow=c(2,2))
for( graphIndex in 1:length(tables) ) 
{
	myT <- tables[[graphIndex]]
	maxCors <- vector(length=ncol(myT))
	averageDepth <- vector(length=ncol(myT))

	sums <- apply(myT, 2, sum)
	myT <- myT[, ! is.na(sums)]


	myT <- myT[,order(-apply(myT, 2, sum))]

	numCols <- ncol(myT)
	
	for( i in 1:numCols )
	{
		maxCors[i] <- -1
	}


	for( i in 2:numCols)
	{
		averageDepth[i] <- mean( myT[,i] )
		
		stopVal <- min(i-1)
		
		for( j in 1:stopVal )
		{
			
			corVal <- cor( myT[,i], myT[,j],method="spearman" )
			
			if( ! is.na(corVal) )
			{	
				maxCors[i] <- max(  maxCors[i], corVal  )
			}
			
		}
	}

	maxCors[1] = 1
	averageDepth[1] <- mean( myT[,1] )
	

#par(mfrow=c(2,1))
#plot(averageDepth, maxCors, ylim=c(0,1))

meanRanks <- rank(-averageDepth, ties.method="min")
#plot(meanRanks,averageDepth)
	
	# the number of "real" taxa the model considers...
	a <- 60
	
	sumTop <- 0 
	
	probs <- vector(length=a)
	
	for( i in 1:a) 
	{
		index <- which( meanRanks == i ) 
		aSum <- 10 ^ averageDepth[index] -1
		sumTop <- sumTop + aSum
	}
	
	for( i in 1:a)
	{
		index <- which( meanRanks == i ) 
		aSum <- 10 ^ averageDepth[index] -1
		probs[i] = aSum /sumTop
	}
	
	simMeans <- vector()
	simCors <- vector()
	
	
	# for every taxa except the a most abundant
	for( i in 1:(numCols-a))
	{
		backgroundErrorRate = runif(1)/ 1000
		
		# choose the parent weighted by relative abundance
		colIndex <- which( meanRanks == sample(1:a,1,prob=probs))
		
		dataSimCol <- vector(length=nrow(myT))
		
		# simulate the taxa for every sample
		for( j in 1:nrow(myT)) 
		{
			# importantly, only the abundance of the parent taxa for that sample is fed to the Poisson distribution
			# (the Poisson distribution is the same as the binomial distrbution for a small background error rate)
			dataSimCol[j] <- rbinom( 1, ceiling( 10 ^ myT[j,colIndex]) -1 , backgroundErrorRate )
		}
		
		simMeans[i] <- log10( mean(dataSimCol) -1 ) 
		
		if( is.nan(simMeans[i]) |  simMeans[i]  < 0 ) 
		{
			simMeans[i] = 0
		}
		
		simCors[i] <-  cor( dataSimCol, myT[,colIndex],method="spearman" )
	}
	
	#plot(simMeans, simCors)
	
	plot(averageDepth, maxCors,ylim=c(0,1),main = names[graphIndex] )
	points(simMeans, simCors,col="red")	
}
