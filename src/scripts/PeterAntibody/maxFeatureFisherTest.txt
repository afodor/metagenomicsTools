rm(list=ls())

setwd("C:\\peterBAnti")

myT <- read.table("pivotedPositions.txt", sep="\t", header=TRUE,row.names=1)
pValues <- vector()
positionNames <- vector()
columnIndex <- vector()

index <- 1
for( i in 3:ncol(myT))
{
	mostCommon = names(sort(summary(myT[,i]), decreasing=T)[1])
	
	if( mostCommon == "NA's")
	{
		mostCommon = names(sort(summary(myT[,i]), decreasing=T)[2])
	}
		
	residues = myT[ !is.na(myT[,i]) ,i]
	assignment = myT$classificaiton[!is.na(myT[,i])]
	
	if( length(residues ) != length(assignment ) )
		stop("No " + length(residues )  + " " + length(assignment ));
	
	mostCommonIsTherap = sum(residues == mostCommon  & assignment == "therapeutic"  )
	notMostCommonIsTherap = sum(residues != mostCommon  & assignment == "therapeutic"  )
	mostCommonNotTherap = sum(residues == mostCommon  & assignment != "therapeutic"  )
	notMostCommonNotTherap = sum(residues != mostCommon  & assignment != "therapeutic"  )
	
	if(  mostCommonIsTherap  + notMostCommonIsTherap +mostCommonNotTherap + notMostCommonNotTherap != length(residues ) ) 
		stop("No logic error")
		
	aMatrix= matrix( c(mostCommonIsTherap, notMostCommonIsTherap,mostCommonNotTherap ,notMostCommonNotTherap ), nrow=2 )
	
	
	print( paste( i , names(myT)[i],  mostCommon))
	
	pValues[index] = fisher.test(aMatrix)$p.value
	positionNames[index] = names(myT)[i]
	columnIndex[index] <- i
	
	index = index + 1
}

dFrame <- data.frame(positionNames,pValues,columnIndex)
	
dFrame <- dFrame [order(dFrame$pValues),]
dFrame$pValuesAdjusted<- p.adjust( dFrame$pValues, method = "BH" )	
		
write.table(dFrame, file=paste0("firstModels.txt"), row.names=FALSE, sep="\t")

hist(pValues)

# code below this point is pretty broken (too inefficient...)

pdf("sortedBySignificance.pdf")
par(mfrow=c(4,5))

aaS = 
c("A"	,"C",	"D",	"E",	"F",	"G", 	
				"H",	"I",	"L",	"K",	"M"	, "N",	"P",	"Q",	"R",	"S"	, "T",	"V"
				,"W"	,"Y")
				
conditions = sort(unique(myT$classificaiton))

for( i in 1 : nrow(dFrame))
{
	for( j in 1 : length(aaS)) 
	{
		fractions <- vector()
		colIndex <- dFrame$columnIndex[i]
		numValid <- sum( !is.na(myT[,colIndex ]))
		
		for( k in 1: length(conditions))
		{
			numMatch = 0;
			
			for( x in 1:nrow(myT)) 
			{	
				if( ! is.na( myT[x,colIndex] ) ) 
				{
					if( myT$classificaiton[x] == conditions[k] &  myT[x,colIndex] == aaS[j] ) 
					{
						numMatch = numMatch + 1
					}
				}
			}
		
			fractions[k] = numMatch / numValid
		}
		
		aLegend = paste( dFrame$positionNames[i], aaS[j])
		plot( 1:length(conditions), fractions ,main=aLegend) 
	}
}

dev.off()


