# this power simulation assumes perfectly a normal distribution 
# and then applies a wilcoxon test which is robsust to the
# underlying distribution.  This will lower our power in comparison to
# a t-test but yields a more robust power estimate.
# the assumption of normality is not well met by microbiome data, but we are using a non-parametric test
# this will only give us a rough approximation of power

# While the complexity of microbiome data makes exact power calculations difficult, we ran a simple,
# crude simulation with 75 total paitents (20 in group #1, 55 in group #2).
# This simulation demonstrated that we have ~81% power with an effect size of diet of 0.8
# We think based on the literature that this effect size is reasonable (justification/references)

rm(list=ls())

# in our proposal, we will have 3 diets, but we power 
# for a comparison comparing one low fiber group to 
# the merging of the two high fiber groups
sampleSizeForGroup1 <- 20
sampleSizeForGroup2 <- 55
numHypotheses <- 100
numUnder <- 0
numBonferroniUnder <-0
fractionTruePositives <- 1
numTruePositves <-0;
effectSize <- 0.8  #effect size is defined as difference in means/sd

pValues <- vector();
truePositives <- vector()

for( j in 1 : numHypotheses ) 
{
	isATruePositive <- ( runif(1) <= fractionTruePositives )

	if( isATruePositive ) 	
		numTruePositves= numTruePositves + 1

	data<-vector()
	data2<-vector()

	for( i in 1 : sampleSizeForGroup1 )
	{
		data[i] = rnorm(1)
	}
	
	for( i in 1:sampleSizeForGroup2 )
	{
	
		if( isATruePositive  ) 
		{
			data2[i] = rnorm(1, mean=effectSize)
		}
		else
		{
			data2[i] = rnorm(1)
		}
	}
	
	pValues[j] <- wilcox.test(data,data2)$p.value 
	truePositives[j] <- isATruePositive
	
	if( isATruePositive  & pValues[j] < 0.05 )
		numUnder = numUnder + 1
	
	if( isATruePositive  & pValues[j] < 0.05 / numHypotheses )
		numBonferroniUnder = numBonferroniUnder + 1	
	
	
}



myFrame <- data.frame(pValues,truePositives  )
myFrame<- myFrame [order(myFrame$pValues),]
myFrame$pAdjust <- p.adjust(myFrame$pValues, method="BH")
myFrame$Bonf <- p.adjust(myFrame$pValues, method="bonferroni")

bhUnder <- 0;

for( i in 1:nrow(myFrame))
{
	if( myFrame$truePositives[i] & myFrame$pAdjust[i] < 0.05  )
		bhUnder <- bhUnder + 1;
}

paste("Num true positives", numTruePositves)
paste("Power under simple 0.05 thrshold ",numUnder/numTruePositves)
paste("Power under Bonferroni", numBonferroniUnder /numTruePositves)
paste("Power under 10% FDR", bhUnder / numTruePositves)
