# this power simulation assumes perfectly a normal distribution 
# and then applies a wilcoxon test which is robust to the
# underlying distribution.  This will lower our power in comparison to
# a t-test but yields a more robust power estimate.

rm(list=ls())

# these values can be changed to different values to allow different comparisons
sampleSizeForGroup1 <- 120
sampleSizeForGroup2 <- 30
numHypotheses <- 1000
numUnder <- 0
fractionTruePositives <- 1
numTruePositves <-100;
effectSize <- 0.8  #effect size is defined as difference in means/sd

pValues <- vector();
truePositives <- vector()

for( j in 1 : numHypotheses ) 
{
	isATruePositive <- ( runif(1) <= fractionTruePositives )

	if( isATruePositive ) 	
		numTruePositves= numTruePositves + 1

	data<-vector()
	data2<-vector()

	for( i in 1 : sampleSizeForGroup1 )
	{
		data[i] = rnorm(1)
	}
	
	for( i in 1:sampleSizeForGroup2 )
	{
	
		if( isATruePositive  ) 
		{
			data2[i] = rnorm(1, mean=effectSize)
		}
		else
		{
			data2[i] = rnorm(1)
		}
	}
	
	pValues[j] <- t.test(data,data2)$p.value 
	truePositives[j] <- isATruePositive
	
	if( isATruePositive  & pValues[j] < 0.05 )
		numUnder = numUnder + 1
}

myFrame <- data.frame(pValues,truePositives  )
myFrame<- myFrame [order(myFrame$pValues),]
myFrame$pAdjust <- p.adjust(myFrame$pValues, method="BH")

bhUnder <- 0;

for( i in 1:nrow(myFrame))
{
	if( myFrame$truePositives[i] & myFrame$pAdjust[i] < 0.05  )
		bhUnder <- bhUnder + 1;
}

paste("Num true positives", numTruePositves)
paste("Power under simple 0.05 thrshold ",numUnder/numTruePositves)
paste("Power under 10% FDR", bhUnder / numTruePositves)
